import React from 'react';
import qs from 'qs';

import { listSelected } from '../components/Sort';
import { Categories, PizzaBlock, Skeleton, Pagination, Sort } from './../components'

import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { getFilter, setCategoryId, setCurrentPage, setFilter } from '../redux/slices/filterSlices';
import { fetchPizzas, getPizzaData, SearchPizzaParams } from '../redux/slices/pizzasSlices';
import { useAppDispatch } from '../redux/store';


const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { categoryId, sortType, currentPage, searchValue } = useSelector(getFilter);
  const { items, status } = useSelector(getPizzaData);
  //console.log(categoryId)

  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  // --------------- –í–®–ò–í–ê–ï–¢ –í URL –¥–∞–Ω–Ω—ã–µ ----------------
  React.useEffect(() => {
    //debugger;
    if (isMounted.current) {
      //–°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qs  --- sortProperty=rating&categoryId=0&currentPage=1
      const queryString = qs.stringify({
        sortProperty: sortType.sortProperty,
        categoryId,
        // categoryId: categoryId > 0 ? categoryId : 0,
        currentPage,
      });
      // –í—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ URL  --- —Å –ø–æ–º–æ—â—å—é —Ö—É–∫–∞ import { useNavigate } from 'react-router-dom'
      navigate(`?${queryString}`);

    }
    isMounted.current = true;
    // eslint-disable-next-line
  }, [categoryId, sortType.sortProperty, currentPage]);

  React.useEffect(() => {
    //debugger;
    if (window.location.search) {
      const params = (qs.parse(window.location.search.substring(1)) as unknown) as SearchPizzaParams;
      //console.log(params)
      const sort = listSelected.find((obj) => obj.sortProperty === params.sortBy);
      dispatch(
        setFilter({
          searchValue: params.search,
          categoryId: Number(params.category),
          currentPage: Number(params.currentPage),
          sortType: sort ? sort : listSelected[0],
        }),
      );

      isSearch.current = true;
    }
    // eslint-disable-next-line
  }, []);

  const getPizzas = async () => {
    //–ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –º–∏–Ω—É—Å - –º—ã –¥–µ–ª–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é ‚Üì, –µ—Å–ª–∏ –Ω–µ—Ç - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ‚Üë
    const order = sortType.sortProperty.includes('-') ? 'desc' : 'asc';
    //–£—Å–ª–∏ —É –Ω–∞—Å –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –µ—Å—Ç—å –º–∏–Ω—É—Å —Ç—ã –º—ã —ç—Ç–æ—Ç –º–∏–Ω—É—Å —É–±–∏—Ä–∞–µ–º –∏ –æ—Ç–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const sortBy = sortType.sortProperty.replace('-', '');
    
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ categoryId > 0 ( –∞ —ç—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤ –º–∞—Å—Å–∏–≤–µ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ categories) —Ç–æ–≥–¥–∞ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É –∫–∞—Ç–µ–≥–∏—Ä–∏—é –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–∏—Ü—Ü—ã, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –í–°–ï –ø–∏—Ü—Ü—ã –∏–º–µ—é—Ç –∏–Ω–¥–µ–∫—Å 0) —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Ä–µ–Ω–¥–∞—Ä—è—Ç—Å—è –≤—Å–µ –ø–∏—Ü—Ü—ã
    const category = categoryId > 0 ? `&category=${categoryId}` : '';
    const search = searchValue ? `&search=${searchValue}` : '';
    // await axios
    //   .get(
    //     `https://62c839ba0f32635590d478cf.mockapi.io/items?page=${currentPage}&limit=4${category}&sortBy=${sortBy}&order=${order}${search}`,
    //   )
    //   .then((response) => {
    //     setItems(response.data);
    //     setIsLoading(false);
    //     console.log(111);
    //   });

    dispatch(
      fetchPizzas({
        sortBy,
        order,
        category,
        search,
        currentPage: String(currentPage),
      }),
    );

    //–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö (–∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    window.scrollTo(0, 0);
  };

  //–í React.useEffect —Ö—É–∫ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã => –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ç–µ–π—Ç–∞, –∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–±–æ –∏–∑ React.useEffect –ø–µ—Ä–≤—ã–π –∫–æ—Ç–æ—Ä—ã–π (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ), –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–µ —Ä–∞–±–æ—Ç—ã —é–∑–µ—Ä–∞! –ö–∞–∫ —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∑–Ω–∞—é—Ç—Å—è? –ê –≤–æ—Ç [categoryId, sortType, searchValue, currentPage]
  React.useEffect(() => {
    //debugger;
    if (!isSearch.current) {
      getPizzas();
    }
    isSearch.current = false;
    // eslint-disable-next-line
  }, [categoryId, sortType, searchValue, currentPage]);
  //–ï—Å–ª–∏ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–∞–∫

  const skeletons = [...new Array(8)].map((_, index) => <Skeleton key={index} />);
  const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />);

  const onClickCategoryId = React.useCallback(
    (id: number) => {
      //console.log(id);
      dispatch(setCategoryId(id));
    }, []
  )

  const onChangePage = (page: number) => {
    //console.log(page);
    dispatch(setCurrentPage(page));
  };

  return (
    <>
      <div className="content__top">
        <Categories categoryId={categoryId} onClickCategoryId={(id) => onClickCategoryId(id)} />
        {/* <Sort sortType={sortType} onChangeSortType={(id) => setSortType(id)} /> */}
        <Sort sort={sortType}/>
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>{' '}
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className="content__items">
          {status === 'loading'
            ? // ? Array(12).fill(<Skeleton />)
              skeletons
            : pizzas}
        </div>
      )}

      <Pagination currentPage={currentPage} onCahgePage={onChangePage} />
    </>
  );
}

export default Home;
